<복습>
1. 변수
-목표 : 변수를 선언할 수 있다.
-목적 : 데이터를 관리하기 위해
-변수 선언 방법
-타입 종류
-콘솔 입출력

2. 연산자
-목표 : 연산자 종류와 그에 따른 결과를 예측할 수 있다.
-산술 연산자: 숫자(정수, 실수)
-비교 연산자: 논리(참 또는 거짓)
-논리 연산자: 논리(참 또는 거짓)
-조건 선택 연산자: 미정(정수, 실수, 논리, 문자열 다 가능)
-증감 연산자 : 숫자
-대입 연산자: 값 (=>오른쪽의 값을 왼쪽에 저장하는 것)

3. 조건문
- 조건문: 조건문을 사용할 수 있다.
- 조건문 종류(if문, switch문)
- ~하면 ...해라
- ~: 조건식, ...:실행문

4. 반복문
-목표: 규칙적으로 반복하는 작업을 반복문으로 만들 수 있다.
-반복문 종류: for문, while문, do while문
-반복횟수, 규칙성, 반복문 종류 후로 나누어서 연습

5. 배열
- 배열을 선언하고 사용할 수 있다.
- 배열 선언 방법
- 배열 특징
	- 배열의 시작 번지는 0번지
	- 배열의 마지막 크기에서 -1 (예: 10개를 만들면 번지는 0부터 9까지라서 마지막번지는 9까지임)
	- 배열은 반복문과 같이 사용
	- 많은 변수들을 효율적으로 관리하기 위해 배열을 사용
	
<day6 진도>
6. 열거형
-목표: 열거형을 만들고 사용할 수 있다.
-목적: 상수에 이름을 붙이는 것
-열거타입 선언
	enum 열거형명 {이름1, 이름2, 이름3, ...}
-열거 타입 변수 선언
	-열거타입 변수 선언
	열거형명 변수명;
	열거형명 변수명 = 열거형명. 이름;

자바
- 객체지향 프로그래밍 언어(OOP)      *OOP= Object Oriented Programming의 약자
- 순서대로 동작(절차를 따르지만)
- 객체에 초점을 맞춤

C언어
- 절차지향 프로그래밍 언어
- 순서에 초점을 맞춤

자바와 C언어의 다름을 설명하기 위한 예시)
Quest: 설문지를 인쇄
-절차지향
	-인쇄하는 기능을 이용하여 인쇄(기능만 있으면 이용해서 quest를 하고 끝내면 됨)
	
-객체지향
	-인쇄를 하기위한 프린터 설계도(클래스)를 만듬
	-설계도를 이용하여 프린터(인스턴스, 객체)를 생성		=>(프린터라는 객체가 필요하기 때문에 객체지향이라고 함)
	-프린터를 이용하여 인쇄

-클래스
	-멤버 변수(정보들) = 필드
	-멤버 메소드(기능들)
	-생성자(초기화)
		예)
			Quest: 자동차만들기
			- 멤버 변수: 바퀴 수, 와이퍼갯수, 회사명, 차종, 차명, 시동(켜졌는지 꺼졌는지), 속력, 기어, ...등
			- 멤버 메소드: 시동 켜기/끄기, 와이퍼 켜기/끄기, 속력 up/down, ...등
			- 생성자 : 바퀴수 4, 와이퍼갯수 2, 회사명 기아, 차종 소형차, 차명 k5, 시동 꺼짐, 속력 0, 기어 파킹, ...
	
	-클래스 선언
		-class 클래스 명{
					멤버변수들;			=>책에서는 "필드"라고 부름 
					멤버메소드들;			
					생성자;
		}
		
	-클래스 명 작성 규칙은 변수명 작성규칙과 동일
	-클래스명 작성 관례
		-클래스 명(이름)의 첫글자는 대문자 => 관례(꼭 안지켜도 상관은 없으나, 이클립스가 지키도록 유도를 하고, 일반적으로 지킴ㅋ)
	
	-객체 선언=>(객체는 아직 안만들어졌어)
			클래스명 객체명;
	-객체 생성=>(객체가 만들어짐.)
			클래스명 객체명 = new 클래스명();	
	
	-멤버 변수와 일반 변수의 차이점
		-일반 변수는 초기값이 자동으로 초기화되지 않음.
		-멤버 변수는 초기값이 자동으로 초기화 됨.
	-멤버 변수 사용
		-객체명. 멤버변수명 = 값; 		//. 이들어가는게 포인트
		
	- 생성자
		- 멤버 변수들을 초기화 하는 곳, 모든 클래스는 생성자가 필수
		- 클래스에 생성자가 하나도 없으면 기본 생성자가 자동으로 만들어져서 호출 됨.
		- 기본 생성자 : (클래스에서 생성자가 하나도 없으면 기본 생성자가 자동으로 만들어져서 호출됨.) & (자동으로 실행되는 생성자)
				public 클래스명(){
			
				}
		- 생성자
			public 클래스명(타입 변수명1, 타입변수명2, ...){
					멤버변수명1 = 변수명1;
					멤버변수명2 = 변수명2;
					...
			}
	-메소드: 기능을 모아놓은 코드

		예)  -음료수 자판기					=메소드(음료수자판기)
			-돈,메뉴						=매개변수(인자)
			-음료수가 나옴 				=리턴타입
			
			-일을 시키려면 제대로된 정보를 전달.
			
		예) 중국집에서 배달
		배달								=메소드
		주소, 메뉴						=매개변수
		요리								=리턴타입
			
		-메소드 선언 방법(교재 247p)
		리턴타입 메소드명(매개변수){
				구현;
				return 값;	//return값이 } 뒤에 오는지 아닌지 쌤꺼랑 비교해서 확인하기
		}
		
			예)	음료수 음료수판기(int 돈, String 타입 메뉴){		//타입이 앞에 꼭 있을 것!
						구현;
				}
				
		-리턴 타입: 결과물을 묶을 수 있는 타입을 씀. (=사이다,환타,콜라 등과같은 것을 한번에 묶을 수 있는 "음료수"라고 써야하는게 맞음)
		-메소드 생성할 때, 다음을 정리
			1. 기능: 기능을 상세하게 설명
			2. 매개변수: 기능을 실행하기 위해 꼭 필요한 정보들을 매개변수로 만듬
			3. 리턴타입: 기능을 실행 후 알려주는 정보를 리턴타입으로 설정
			4. 메소드명: 적절한 단어를 이용하여 메소드명을 생성
			
			-메소드는 상황에 따라서 return 값이 없을 수 있다.
			-리턴타입이 없는 경우는 void라는 키워드로 대체
			-메소드의 매개변수는 변수 선언 시, 값이 복사가 된다.
				-매개변수가 *일반변수인 경우, 원본 값이 변하지 않음. =>파일 복붙해서 복사본만들기(내용을 수정한다고해도 원본파일의 내용물이 수정되지 않음)
				-매개변수가 참조변수인 경우, 원본 값이 변할 수 있음. =>메모장 바로가기만들기(실제파일하고 파일주소가 연결되어있음, 값수정가능)
					<참고>
					-일반변수: 타입이 기본타입인 경우(값이 1,2,3 ..)/ 값을 저장하는 변수
					-참조변수: 타입이 기본타입이 아닌 경우(배열, 열거형, 객체 ...)/  값이 아닌 주소를 저장하는 변수
		
	-메소드를 사용하는 이유
		- 재사용을 통해 코드의 길이를 줄이기 위해(메소드가 길면 길수록, 코드 재사용을 많이 줄일 수 있음)
		- 기능의 유지보수가 쉬워짐
		- 코드의 구조를 파악하기 쉬워짐.
	
 	
	지역변수 : 우리가 지금까지 사용한 일반 변수, 특정 지역에서만 사용가능한 변수 
			- 선언된 위치부터 해당 {}안 끝까지 사용 가능
	멤버변수 : 클래스 안에 있는 변수로, 해당 클래스의 모든 곳에서 사용가능
	
day6에서 꼭 알고가야 하는 것.
1. 메소드 만드는 방법
2. 메소드의 특징
3. 메소드를 호출하는 방법			
			
		
			
			
			
			
			
			
			

