[spring_mhw]
세션확인 => 개발자도구 - Application - storage- cookies

<자동로그인>
1. 쿠키 유지시간을 길게 만들고(예: 7, 30일 등), 해당 쿠키 정보(ID와 만료일)를 데이터베이스에 저장
+ DB  member테이블에 속성추가 >세션이름, 세션만료시간
ALTER TABLE `spring_mhw`.`member` 
ADD COLUMN `session_id` VARCHAR(255) NULL AFTER `authority`,
ADD COLUMN `session_limit` DATETIME NULL AFTER `session_id`;
------------------------------------------------------------------------
2. 로그인이 풀려 회원정보가 없지만 아직 쿠키 유지시간이 있는 경우 => 자동로그인을 해야하는 경우
쿠키 정보를 검색해서 만료일이 지나지 않은 회원 정보를 가져옴 
- 가져온 회원 정보를 세션에 저장해서 자동으로 로그인을 시킴
------------------------------------------------------------------------
3. 로그아웃
- 회원정보에 저장된 쿠키 정보를 수정
-> session_id를 none(어떠한문자던 상관없음)으로 하고, session_limit을 시간은 현재시간으로해서
검색을 할 수 없도록 한다
-> 쿠키유지시간을 0으로 만듦 
------------------------------------------------------------------------
[springtest]
자동로그인 순서정리
1. 로그인화면에 자동로그인 체크박스 추가
2. 체크박스 정보가 컨트롤러로 가는지 확인
   - MemberVO에서 자동로그인박스 정보를 불러올 수 있도록 추가->jsp파일에서 name이랑 맞춰주기
3. 체크박스 정보가 LoginInterceptor까지 가는지 확인
4. LoginInterceptor에서 회원정보가 있고, 자동로그인이 체크되어있으면 자동로그인기능 추가
    - loginCookie이름을 가지는 쿠키를 생성
    - loginCookie유지시간을 7일(60*60*24*7)로 설정
    - loginCookie를 response에 추가
    - DB에 로그인한 유저 정보에 세션아이디와 만료시간을 업데이트함
5. 자동 로그인을 위한 AutoLoginInterceptor 클래스 추가
    - preHandle 메소드(컨트롤러에 들어가기 전에 체크하는 메소드)에 loginCookie 정보를 가져와서 있으면,
       해당 쿠키의 정보와 일치하는 회원정보를 DB에서 가져옴
       (session_id가 일치하고 만료시간이 현재시간보다 큰 회원정보)
    - 일치하는 회원 정보가 있으면 세션에 저장
6. 모든 URL에 AutoLoginInterceptor를 확인할 수 있도록 servlet-context.xml에 설정
7. 로그아웃 시, loginCookie 정보가 있으면 쿠키유지 시간을 0으로 하고, DB에 session_id와 만료시간을 수정
------------------------------------------------------------------------
[springtest]
비밀번호 찾기 

